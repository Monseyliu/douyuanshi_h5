{"remainingRequest":"/Users/huangzubin13/Desktop/gitProject/douyuanshi/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/huangzubin13/Desktop/gitProject/douyuanshi/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangzubin13/Desktop/gitProject/douyuanshi/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangzubin13/Desktop/gitProject/douyuanshi/src/views/clientLogin.vue?vue&type=template&id=26369998&scoped=true&","dependencies":[{"path":"/Users/huangzubin13/Desktop/gitProject/douyuanshi/src/views/clientLogin.vue","mtime":1624078886826},{"path":"/Users/huangzubin13/Desktop/gitProject/douyuanshi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangzubin13/Desktop/gitProject/douyuanshi/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/huangzubin13/Desktop/gitProject/douyuanshi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangzubin13/Desktop/gitProject/douyuanshi/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "client-login" }, [
    _vm._m(0),
    _c("h1", { staticClass: "title" }, [_vm._v("客户登记表")]),
    _c("div", { staticClass: "person-info" }, [
      _c("div", { staticClass: "info-top" }, [
        _vm._m(1),
        _c("div", { staticClass: "top-right" }, [
          _c("span", { staticClass: "top-date" }, [
            _vm._v(" 日期："),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.year,
                  expression: "year"
                }
              ],
              staticClass: "year",
              attrs: { type: "number" },
              domProps: { value: _vm.year },
              on: {
                input: function($event) {
                  if ($event.target.composing) {
                    return
                  }
                  _vm.year = $event.target.value
                }
              }
            }),
            _vm._v("年 "),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.month,
                  expression: "month"
                }
              ],
              attrs: { type: "number" },
              domProps: { value: _vm.month },
              on: {
                input: function($event) {
                  if ($event.target.composing) {
                    return
                  }
                  _vm.month = $event.target.value
                }
              }
            }),
            _vm._v("月 "),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.day,
                  expression: "day"
                }
              ],
              attrs: { type: "number" },
              domProps: { value: _vm.day },
              on: {
                input: function($event) {
                  if ($event.target.composing) {
                    return
                  }
                  _vm.day = $event.target.value
                }
              }
            }),
            _vm._v("日 ")
          ])
        ])
      ]),
      _c(
        "div",
        { staticClass: "info-common" },
        [
          _c("InputBox", {
            model: {
              value: _vm.Uname,
              callback: function($$v) {
                _vm.Uname = $$v
              },
              expression: "Uname"
            }
          }),
          _vm._v(" 性别: 男: "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.gender,
                expression: "gender"
              }
            ],
            attrs: { type: "radio", value: "man" },
            domProps: { checked: _vm._q(_vm.gender, "man") },
            on: {
              change: function($event) {
                _vm.gender = "man"
              }
            }
          }),
          _vm._v(" 女: "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.gender,
                expression: "gender"
              }
            ],
            staticClass: "women",
            attrs: { type: "radio", value: "women" },
            domProps: { checked: _vm._q(_vm.gender, "women") },
            on: {
              change: function($event) {
                _vm.gender = "women"
              }
            }
          }),
          _c("InputBox", {
            attrs: { label: "年龄", inputWidth: "2rem", type: "number" },
            model: {
              value: _vm.age,
              callback: function($$v) {
                _vm.age = $$v
              },
              expression: "age"
            }
          }),
          _c("InputBox", {
            attrs: { label: "联系电话", inputWidth: "7rem", type: "number" },
            model: {
              value: _vm.phone,
              callback: function($$v) {
                _vm.phone = $$v
              },
              expression: "phone"
            }
          })
        ],
        1
      ),
      _c(
        "div",
        { staticClass: "info-common" },
        [
          _c("InputBox", {
            attrs: { label: "微信", inputWidth: "5rem", type: "text" },
            model: {
              value: _vm.weChat,
              callback: function($$v) {
                _vm.weChat = $$v
              },
              expression: "weChat"
            }
          }),
          _c("InputBox", {
            attrs: { label: "居住地", inputWidth: "18rem", type: "text" },
            model: {
              value: _vm.address,
              callback: function($$v) {
                _vm.address = $$v
              },
              expression: "address"
            }
          })
        ],
        1
      ),
      _c("div", { staticClass: "info-common way" }, [
        _vm._v(" 来院途径: "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.way,
              expression: "way"
            }
          ],
          attrs: { type: "radio", value: "团购" },
          domProps: { checked: _vm._q(_vm.way, "团购") },
          on: {
            change: function($event) {
              _vm.way = "团购"
            }
          }
        }),
        _vm._v("团购 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.way,
              expression: "way"
            }
          ],
          attrs: { type: "radio", value: "电话" },
          domProps: { checked: _vm._q(_vm.way, "电话") },
          on: {
            change: function($event) {
              _vm.way = "电话"
            }
          }
        }),
        _vm._v("电话 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.way,
              expression: "way"
            }
          ],
          attrs: { type: "radio", value: "QQ" },
          domProps: { checked: _vm._q(_vm.way, "QQ") },
          on: {
            change: function($event) {
              _vm.way = "QQ"
            }
          }
        }),
        _vm._v("QQ "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.way,
              expression: "way"
            }
          ],
          attrs: { type: "radio", value: "路过" },
          domProps: { checked: _vm._q(_vm.way, "路过") },
          on: {
            change: function($event) {
              _vm.way = "路过"
            }
          }
        }),
        _vm._v("路过 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.way,
              expression: "way"
            }
          ],
          attrs: { type: "radio", value: "户外广告" },
          domProps: { checked: _vm._q(_vm.way, "户外广告") },
          on: {
            change: function($event) {
              _vm.way = "户外广告"
            }
          }
        }),
        _vm._v("户外广告 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.way,
              expression: "way"
            }
          ],
          attrs: { type: "radio", value: "介绍" },
          domProps: { checked: _vm._q(_vm.way, "介绍") },
          on: {
            change: function($event) {
              _vm.way = "介绍"
            }
          }
        }),
        _vm._v("介绍 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.way,
              expression: "way"
            }
          ],
          attrs: { type: "radio", value: "其他" },
          domProps: { checked: _vm._q(_vm.way, "其他") },
          on: {
            change: function($event) {
              _vm.way = "其他"
            }
          }
        }),
        _vm._v("其他 ")
      ]),
      _c("div", { staticClass: "info-common health-project way" }, [
        _vm._v(" 护理项目: "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.healthProject,
              expression: "healthProject"
            }
          ],
          attrs: { type: "checkbox", id: "zhichuang", value: "痔疮" },
          domProps: {
            checked: Array.isArray(_vm.healthProject)
              ? _vm._i(_vm.healthProject, "痔疮") > -1
              : _vm.healthProject
          },
          on: {
            change: function($event) {
              var $$a = _vm.healthProject,
                $$el = $event.target,
                $$c = $$el.checked ? true : false
              if (Array.isArray($$a)) {
                var $$v = "痔疮",
                  $$i = _vm._i($$a, $$v)
                if ($$el.checked) {
                  $$i < 0 && (_vm.healthProject = $$a.concat([$$v]))
                } else {
                  $$i > -1 &&
                    (_vm.healthProject = $$a
                      .slice(0, $$i)
                      .concat($$a.slice($$i + 1)))
                }
              } else {
                _vm.healthProject = $$c
              }
            }
          }
        }),
        _c("label", { attrs: { for: "zhichuang" } }, [_vm._v("痔疮")]),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.healthProject,
              expression: "healthProject"
            }
          ],
          attrs: { type: "checkbox", id: "zhichuang", value: "痘坑" },
          domProps: {
            checked: Array.isArray(_vm.healthProject)
              ? _vm._i(_vm.healthProject, "痘坑") > -1
              : _vm.healthProject
          },
          on: {
            change: function($event) {
              var $$a = _vm.healthProject,
                $$el = $event.target,
                $$c = $$el.checked ? true : false
              if (Array.isArray($$a)) {
                var $$v = "痘坑",
                  $$i = _vm._i($$a, $$v)
                if ($$el.checked) {
                  $$i < 0 && (_vm.healthProject = $$a.concat([$$v]))
                } else {
                  $$i > -1 &&
                    (_vm.healthProject = $$a
                      .slice(0, $$i)
                      .concat($$a.slice($$i + 1)))
                }
              } else {
                _vm.healthProject = $$c
              }
            }
          }
        }),
        _c("label", { attrs: { for: "zhichuang" } }, [_vm._v("痘坑")]),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.healthProject,
              expression: "healthProject"
            }
          ],
          attrs: { type: "checkbox", id: "zhichuang", value: "斑" },
          domProps: {
            checked: Array.isArray(_vm.healthProject)
              ? _vm._i(_vm.healthProject, "斑") > -1
              : _vm.healthProject
          },
          on: {
            change: function($event) {
              var $$a = _vm.healthProject,
                $$el = $event.target,
                $$c = $$el.checked ? true : false
              if (Array.isArray($$a)) {
                var $$v = "斑",
                  $$i = _vm._i($$a, $$v)
                if ($$el.checked) {
                  $$i < 0 && (_vm.healthProject = $$a.concat([$$v]))
                } else {
                  $$i > -1 &&
                    (_vm.healthProject = $$a
                      .slice(0, $$i)
                      .concat($$a.slice($$i + 1)))
                }
              } else {
                _vm.healthProject = $$c
              }
            }
          }
        }),
        _c("label", { attrs: { for: "zhichuang" } }, [_vm._v("斑")]),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.healthProject,
              expression: "healthProject"
            }
          ],
          attrs: { type: "checkbox", id: "zhichuang", value: "敏感" },
          domProps: {
            checked: Array.isArray(_vm.healthProject)
              ? _vm._i(_vm.healthProject, "敏感") > -1
              : _vm.healthProject
          },
          on: {
            change: function($event) {
              var $$a = _vm.healthProject,
                $$el = $event.target,
                $$c = $$el.checked ? true : false
              if (Array.isArray($$a)) {
                var $$v = "敏感",
                  $$i = _vm._i($$a, $$v)
                if ($$el.checked) {
                  $$i < 0 && (_vm.healthProject = $$a.concat([$$v]))
                } else {
                  $$i > -1 &&
                    (_vm.healthProject = $$a
                      .slice(0, $$i)
                      .concat($$a.slice($$i + 1)))
                }
              } else {
                _vm.healthProject = $$c
              }
            }
          }
        }),
        _c("label", { attrs: { for: "zhichuang" } }, [_vm._v("敏感")])
      ]),
      _c("div", { staticClass: "info-common way" }, [
        _vm._v(" 从事职业: "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.career,
              expression: "career"
            }
          ],
          attrs: { type: "radio", value: "学生" },
          domProps: { checked: _vm._q(_vm.career, "学生") },
          on: {
            change: function($event) {
              _vm.career = "学生"
            }
          }
        }),
        _vm._v("学生 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.career,
              expression: "career"
            }
          ],
          attrs: { type: "radio", value: "影视艺人" },
          domProps: { checked: _vm._q(_vm.career, "影视艺人") },
          on: {
            change: function($event) {
              _vm.career = "影视艺人"
            }
          }
        }),
        _vm._v("影视艺人 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.career,
              expression: "career"
            }
          ],
          attrs: { type: "radio", value: "企业职员" },
          domProps: { checked: _vm._q(_vm.career, "企业职员") },
          on: {
            change: function($event) {
              _vm.career = "企业职员"
            }
          }
        }),
        _vm._v("企业职员 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.career,
              expression: "career"
            }
          ],
          attrs: { type: "radio", value: "政府职员" },
          domProps: { checked: _vm._q(_vm.career, "政府职员") },
          on: {
            change: function($event) {
              _vm.career = "政府职员"
            }
          }
        }),
        _vm._v("政府职员 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.career,
              expression: "career"
            }
          ],
          attrs: { type: "radio", value: "私营业主" },
          domProps: { checked: _vm._q(_vm.career, "私营业主") },
          on: {
            change: function($event) {
              _vm.career = "私营业主"
            }
          }
        }),
        _vm._v("私营业主 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.career,
              expression: "career"
            }
          ],
          attrs: { type: "radio", value: "家庭主妇" },
          domProps: { checked: _vm._q(_vm.career, "家庭主妇") },
          on: {
            change: function($event) {
              _vm.career = "家庭主妇"
            }
          }
        }),
        _vm._v("家庭主妇 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.career,
              expression: "career"
            }
          ],
          attrs: { type: "radio", value: "自由职员" },
          domProps: { checked: _vm._q(_vm.career, "自由职员") },
          on: {
            change: function($event) {
              _vm.career = "自由职员"
            }
          }
        }),
        _vm._v("自由职员 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.career,
              expression: "career"
            }
          ],
          attrs: { type: "radio", value: "其他" },
          domProps: { checked: _vm._q(_vm.career, "其他") },
          on: {
            change: function($event) {
              _vm.career = "其他"
            }
          }
        }),
        _vm._v("其他 ")
      ]),
      _c("div", { staticClass: "face-affect" }, [
        _c("div", { staticClass: "face-content" }, [
          _c("div", { staticClass: "face-select" }, [
            _c("div", [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.faceAffect,
                    expression: "faceAffect"
                  }
                ],
                attrs: { type: "checkbox", value: "眉间部位" },
                domProps: {
                  checked: Array.isArray(_vm.faceAffect)
                    ? _vm._i(_vm.faceAffect, "眉间部位") > -1
                    : _vm.faceAffect
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.faceAffect,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "眉间部位",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.faceAffect = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.faceAffect = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.faceAffect = $$c
                    }
                  }
                }
              }),
              _vm._v("眉间部位 ")
            ]),
            _c("div", [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.faceAffect,
                    expression: "faceAffect"
                  }
                ],
                attrs: { type: "checkbox", value: "鼻子部位" },
                domProps: {
                  checked: Array.isArray(_vm.faceAffect)
                    ? _vm._i(_vm.faceAffect, "鼻子部位") > -1
                    : _vm.faceAffect
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.faceAffect,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "鼻子部位",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.faceAffect = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.faceAffect = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.faceAffect = $$c
                    }
                  }
                }
              }),
              _vm._v("鼻子部位 ")
            ]),
            _c("div", [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.faceAffect,
                    expression: "faceAffect"
                  }
                ],
                attrs: { type: "checkbox", value: "两颚部位" },
                domProps: {
                  checked: Array.isArray(_vm.faceAffect)
                    ? _vm._i(_vm.faceAffect, "两颚部位") > -1
                    : _vm.faceAffect
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.faceAffect,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "两颚部位",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.faceAffect = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.faceAffect = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.faceAffect = $$c
                    }
                  }
                }
              }),
              _vm._v("两颚部位 ")
            ]),
            _c("div", [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.faceAffect,
                    expression: "faceAffect"
                  }
                ],
                attrs: { type: "checkbox", value: "上唇部位" },
                domProps: {
                  checked: Array.isArray(_vm.faceAffect)
                    ? _vm._i(_vm.faceAffect, "上唇部位") > -1
                    : _vm.faceAffect
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.faceAffect,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "上唇部位",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.faceAffect = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.faceAffect = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.faceAffect = $$c
                    }
                  }
                }
              }),
              _vm._v("上唇部位 ")
            ])
          ]),
          _vm._m(2),
          _c("div", { staticClass: "face-select" }, [
            _c("div", [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.faceAffect,
                    expression: "faceAffect"
                  }
                ],
                attrs: { type: "checkbox", value: "额头部位" },
                domProps: {
                  checked: Array.isArray(_vm.faceAffect)
                    ? _vm._i(_vm.faceAffect, "额头部位") > -1
                    : _vm.faceAffect
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.faceAffect,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "额头部位",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.faceAffect = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.faceAffect = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.faceAffect = $$c
                    }
                  }
                }
              }),
              _vm._v("额头部位 ")
            ]),
            _c("div", [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.faceAffect,
                    expression: "faceAffect"
                  }
                ],
                attrs: { type: "checkbox", value: "两颚部位2" },
                domProps: {
                  checked: Array.isArray(_vm.faceAffect)
                    ? _vm._i(_vm.faceAffect, "两颚部位2") > -1
                    : _vm.faceAffect
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.faceAffect,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "两颚部位2",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.faceAffect = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.faceAffect = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.faceAffect = $$c
                    }
                  }
                }
              }),
              _vm._v("两颚部位 ")
            ]),
            _c("div", [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.faceAffect,
                    expression: "faceAffect"
                  }
                ],
                attrs: { type: "checkbox", value: "口周部位" },
                domProps: {
                  checked: Array.isArray(_vm.faceAffect)
                    ? _vm._i(_vm.faceAffect, "口周部位") > -1
                    : _vm.faceAffect
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.faceAffect,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "口周部位",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.faceAffect = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.faceAffect = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.faceAffect = $$c
                    }
                  }
                }
              }),
              _vm._v("口周部位 ")
            ]),
            _c("div", [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.faceAffect,
                    expression: "faceAffect"
                  }
                ],
                attrs: { type: "checkbox", value: "下颚部位" },
                domProps: {
                  checked: Array.isArray(_vm.faceAffect)
                    ? _vm._i(_vm.faceAffect, "下颚部位") > -1
                    : _vm.faceAffect
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.faceAffect,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "下颚部位",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.faceAffect = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.faceAffect = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.faceAffect = $$c
                    }
                  }
                }
              }),
              _vm._v("下颚部位 ")
            ])
          ])
        ]),
        _c("p", { staticClass: "face-title" }, [_vm._v("面部患处分布图")])
      ])
    ]),
    _c("div", { staticClass: "client-desc" }, [
      _vm._m(3),
      _c("div", { staticClass: "skin-condition" }, [
        _c("div", { staticClass: "condition-left" }, [_vm._v(" 皮肤总况： ")]),
        _c("div", { staticClass: "condition-right" }, [
          _c("div", { staticClass: "condition-item" }, [
            _vm._v(" 痘："),
            _c("span", { staticClass: "item-wrapper" }, [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "痤疮" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "痤疮") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "痤疮",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("痤疮 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "囊肿" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "囊肿") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "囊肿",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("囊肿 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "丘疹" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "丘疹") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "丘疹",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("丘疹 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "脓包" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "脓包") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "脓包",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("脓包 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "黑头" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "黑头") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "黑头",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("黑头 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "白头" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "白头") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "白头",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("白头 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "结节" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "结节") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "结节",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("结节 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "痘印" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "痘印") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "痘印",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("痘印 ")
            ])
          ]),
          _c("div", { staticClass: "condition-item" }, [
            _vm._v(" 斑："),
            _c("span", { staticClass: "item-wrapper" }, [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "雀斑" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "雀斑") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "雀斑",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("雀斑 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "黄褐斑" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "黄褐斑") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "黄褐斑",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("黄褐斑 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "晒斑" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "晒斑") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "晒斑",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("晒斑 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "真皮斑" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "真皮斑") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "真皮斑",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("真皮斑 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "表皮斑" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "表皮斑") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "表皮斑",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("表皮斑 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "老年斑" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "老年斑") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "老年斑",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("老年斑 ")
            ])
          ]),
          _c("div", { staticClass: "condition-item" }, [
            _vm._v(" 敏："),
            _c("span", { staticClass: "item-wrapper" }, [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "干敏" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "干敏") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "干敏",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("干敏 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "激素敏感" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "激素敏感") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "激素敏感",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("激素敏感 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "依赖性皮炎" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "依赖性皮炎") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "依赖性皮炎",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("依赖性皮炎 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "湿疹" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "湿疹") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "湿疹",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("湿疹 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "溢脂性皮炎" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "溢脂性皮炎") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "溢脂性皮炎",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("溢脂性皮炎 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "毛囊炎" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "毛囊炎") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "毛囊炎",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("毛囊炎 ")
            ])
          ]),
          _c("div", { staticClass: "condition-item" }, [
            _vm._v(" 坑："),
            _c("span", { staticClass: "item-wrapper" }, [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "局部性凹坑" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "局部性凹坑") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "局部性凹坑",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("局部性凹坑 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "1度" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "1度") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "1度",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("1度 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "2度" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "2度") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "2度",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("2度 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "3度" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "3度") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "3度",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("3度 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "密集型凹坑" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "密集型凹坑") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "密集型凹坑",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("密集型凹坑 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "4度" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "4度") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "4度",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("4度 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "5度" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "5度") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "5度",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("5度 "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.skinCondition,
                    expression: "skinCondition"
                  }
                ],
                attrs: { type: "checkbox", value: "毛孔性凹坑" },
                domProps: {
                  checked: Array.isArray(_vm.skinCondition)
                    ? _vm._i(_vm.skinCondition, "毛孔性凹坑") > -1
                    : _vm.skinCondition
                },
                on: {
                  change: function($event) {
                    var $$a = _vm.skinCondition,
                      $$el = $event.target,
                      $$c = $$el.checked ? true : false
                    if (Array.isArray($$a)) {
                      var $$v = "毛孔性凹坑",
                        $$i = _vm._i($$a, $$v)
                      if ($$el.checked) {
                        $$i < 0 && (_vm.skinCondition = $$a.concat([$$v]))
                      } else {
                        $$i > -1 &&
                          (_vm.skinCondition = $$a
                            .slice(0, $$i)
                            .concat($$a.slice($$i + 1)))
                      }
                    } else {
                      _vm.skinCondition = $$c
                    }
                  }
                }
              }),
              _vm._v("毛孔性凹坑 ")
            ])
          ])
        ])
      ]),
      _c(
        "div",
        { staticClass: "skin-type" },
        [
          _vm._v(" 皮肤性质： "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.skinType,
                expression: "skinType"
              }
            ],
            attrs: { type: "radio", value: "干" },
            domProps: { checked: _vm._q(_vm.skinType, "干") },
            on: {
              change: function($event) {
                _vm.skinType = "干"
              }
            }
          }),
          _vm._v("干 "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.skinType,
                expression: "skinType"
              }
            ],
            attrs: { type: "radio", value: "中性" },
            domProps: { checked: _vm._q(_vm.skinType, "中性") },
            on: {
              change: function($event) {
                _vm.skinType = "中性"
              }
            }
          }),
          _vm._v("中性 "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.skinType,
                expression: "skinType"
              }
            ],
            attrs: { type: "radio", value: "油" },
            domProps: { checked: _vm._q(_vm.skinType, "油") },
            on: {
              change: function($event) {
                _vm.skinType = "油"
              }
            }
          }),
          _vm._v("油 "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.skinType,
                expression: "skinType"
              }
            ],
            attrs: { type: "radio", value: "脓包" },
            domProps: { checked: _vm._q(_vm.skinType, "脓包") },
            on: {
              change: function($event) {
                _vm.skinType = "脓包"
              }
            }
          }),
          _vm._v("脓包 "),
          _c("InputBox", {
            staticClass: "input-box",
            attrs: { label: "发病时间", inputWidth: "5rem", type: "text" },
            model: {
              value: _vm.oneSetTime,
              callback: function($$v) {
                _vm.oneSetTime = $$v
              },
              expression: "oneSetTime"
            }
          }),
          _c("InputBox", {
            staticClass: "input-box",
            attrs: { label: "其他", inputWidth: "5rem", type: "text" },
            model: {
              value: _vm.others,
              callback: function($$v) {
                _vm.others = $$v
              },
              expression: "others"
            }
          })
        ],
        1
      ),
      _c("div", { staticClass: "skin-type" }, [
        _vm._v(" 特殊情况： 皮肤是否发痒： "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.skinItchy,
              expression: "skinItchy"
            }
          ],
          attrs: { type: "radio", value: "是" },
          domProps: { checked: _vm._q(_vm.skinItchy, "是") },
          on: {
            change: function($event) {
              _vm.skinItchy = "是"
            }
          }
        }),
        _vm._v("是 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.skinItchy,
              expression: "skinItchy"
            }
          ],
          attrs: { type: "radio", value: "否" },
          domProps: { checked: _vm._q(_vm.skinItchy, "否") },
          on: {
            change: function($event) {
              _vm.skinItchy = "否"
            }
          }
        }),
        _vm._v("否 痘和痘之间是否发红： "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.skinRed,
              expression: "skinRed"
            }
          ],
          attrs: { type: "radio", value: "是" },
          domProps: { checked: _vm._q(_vm.skinRed, "是") },
          on: {
            change: function($event) {
              _vm.skinRed = "是"
            }
          }
        }),
        _vm._v("是 "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.skinRed,
              expression: "skinRed"
            }
          ],
          attrs: { type: "radio", value: "否" },
          domProps: { checked: _vm._q(_vm.skinRed, "否") },
          on: {
            change: function($event) {
              _vm.skinRed = "否"
            }
          }
        }),
        _vm._v("否 ")
      ]),
      _c("div", { staticClass: "common-wrapper" }, [
        _c("div", { staticClass: "wrapper-left" }, [_vm._v(" 生活情况:  ")]),
        _c(
          "div",
          { staticClass: "wrapper-right" },
          [
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.abnormalSecretion,
                  expression: "abnormalSecretion"
                }
              ],
              attrs: { type: "checkbox" },
              domProps: {
                checked: Array.isArray(_vm.abnormalSecretion)
                  ? _vm._i(_vm.abnormalSecretion, null) > -1
                  : _vm.abnormalSecretion
              },
              on: {
                change: function($event) {
                  var $$a = _vm.abnormalSecretion,
                    $$el = $event.target,
                    $$c = $$el.checked ? true : false
                  if (Array.isArray($$a)) {
                    var $$v = null,
                      $$i = _vm._i($$a, $$v)
                    if ($$el.checked) {
                      $$i < 0 && (_vm.abnormalSecretion = $$a.concat([$$v]))
                    } else {
                      $$i > -1 &&
                        (_vm.abnormalSecretion = $$a
                          .slice(0, $$i)
                          .concat($$a.slice($$i + 1)))
                    }
                  } else {
                    _vm.abnormalSecretion = $$c
                  }
                }
              }
            }),
            _vm._v("分泌异常,荷尔蒙失调   "),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.bodyHot,
                  expression: "bodyHot"
                }
              ],
              attrs: { type: "checkbox" },
              domProps: {
                checked: Array.isArray(_vm.bodyHot)
                  ? _vm._i(_vm.bodyHot, null) > -1
                  : _vm.bodyHot
              },
              on: {
                change: function($event) {
                  var $$a = _vm.bodyHot,
                    $$el = $event.target,
                    $$c = $$el.checked ? true : false
                  if (Array.isArray($$a)) {
                    var $$v = null,
                      $$i = _vm._i($$a, $$v)
                    if ($$el.checked) {
                      $$i < 0 && (_vm.bodyHot = $$a.concat([$$v]))
                    } else {
                      $$i > -1 &&
                        (_vm.bodyHot = $$a
                          .slice(0, $$i)
                          .concat($$a.slice($$i + 1)))
                    }
                  } else {
                    _vm.bodyHot = $$c
                  }
                }
              }
            }),
            _vm._v("火气旺盛   睡眠： "),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.sleepWell,
                  expression: "sleepWell"
                }
              ],
              attrs: { type: "radio", value: "正常" },
              domProps: { checked: _vm._q(_vm.sleepWell, "正常") },
              on: {
                change: function($event) {
                  _vm.sleepWell = "正常"
                }
              }
            }),
            _vm._v("正常   "),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.sleepWell,
                  expression: "sleepWell"
                }
              ],
              attrs: { type: "radio", value: "没规律(熬夜)" },
              domProps: { checked: _vm._q(_vm.sleepWell, "没规律(熬夜)") },
              on: {
                change: function($event) {
                  _vm.sleepWell = "没规律(熬夜)"
                }
              }
            }),
            _vm._v("没规律(熬夜)   现在情况是否是最严重："),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.isBad,
                  expression: "isBad"
                }
              ],
              attrs: { type: "radio", value: "是" },
              domProps: { checked: _vm._q(_vm.isBad, "是") },
              on: {
                change: function($event) {
                  _vm.isBad = "是"
                }
              }
            }),
            _vm._v("是   "),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.isBad,
                  expression: "isBad"
                }
              ],
              attrs: { type: "radio", value: "否" },
              domProps: { checked: _vm._q(_vm.isBad, "否") },
              on: {
                change: function($event) {
                  _vm.isBad = "否"
                }
              }
            }),
            _vm._v("否   "),
            _c("InputBox", {
              attrs: { label: "最严重时时什么时候", inputWidth: "7rem" },
              model: {
                value: _vm.mostserious,
                callback: function($$v) {
                  _vm.mostserious = $$v
                },
                expression: "mostserious"
              }
            })
          ],
          1
        )
      ]),
      _c("div", { staticClass: "common-wrapper" }, [
        _c("div", { staticClass: "wrapper-left" }, [_vm._v(" 治疗史:  ")]),
        _c(
          "div",
          { staticClass: "wrapper-right" },
          [
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.haveTreat,
                  expression: "haveTreat"
                }
              ],
              attrs: { type: "radio", value: "有" },
              domProps: { checked: _vm._q(_vm.haveTreat, "有") },
              on: {
                change: function($event) {
                  _vm.haveTreat = "有"
                }
              }
            }),
            _vm._v("有   "),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.haveTreat,
                  expression: "haveTreat"
                }
              ],
              attrs: { type: "radio", value: "无" },
              domProps: { checked: _vm._q(_vm.haveTreat, "无") },
              on: {
                change: function($event) {
                  _vm.haveTreat = "无"
                }
              }
            }),
            _vm._v("无   "),
            _c("InputBox", {
              attrs: { label: "治疗情况", inputWidth: "12rem" },
              model: {
                value: _vm.treatSituation,
                callback: function($$v) {
                  _vm.treatSituation = $$v
                },
                expression: "treatSituation"
              }
            })
          ],
          1
        )
      ]),
      _c("div", { staticClass: "common-wrapper" }, [
        _c("div", { staticClass: "wrapper-left" }, [_vm._v(" 过敏史:  ")]),
        _c(
          "div",
          { staticClass: "wrapper-right" },
          [
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.allergies,
                  expression: "allergies"
                }
              ],
              attrs: { type: "radio", value: "食物过敏" },
              domProps: { checked: _vm._q(_vm.allergies, "食物过敏") },
              on: {
                change: function($event) {
                  _vm.allergies = "食物过敏"
                }
              }
            }),
            _vm._v("食物过敏   "),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.allergies,
                  expression: "allergies"
                }
              ],
              attrs: { type: "radio", value: "气候变化过敏" },
              domProps: { checked: _vm._q(_vm.allergies, "气候变化过敏") },
              on: {
                change: function($event) {
                  _vm.allergies = "气候变化过敏"
                }
              }
            }),
            _vm._v("气候变化过敏   "),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.allergies,
                  expression: "allergies"
                }
              ],
              attrs: { type: "radio", value: "换肤后遗症" },
              domProps: { checked: _vm._q(_vm.allergies, "换肤后遗症") },
              on: {
                change: function($event) {
                  _vm.allergies = "换肤后遗症"
                }
              }
            }),
            _vm._v("换肤后遗症   "),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.allergies,
                  expression: "allergies"
                }
              ],
              attrs: { type: "radio", value: "天生性皮肤过敏" },
              domProps: { checked: _vm._q(_vm.allergies, "天生性皮肤过敏") },
              on: {
                change: function($event) {
                  _vm.allergies = "天生性皮肤过敏"
                }
              }
            }),
            _vm._v("天生性皮肤过敏   "),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.allergies,
                  expression: "allergies"
                }
              ],
              attrs: { type: "radio", value: "化妆品" },
              domProps: { checked: _vm._q(_vm.allergies, "化妆品") },
              on: {
                change: function($event) {
                  _vm.allergies = "化妆品"
                }
              }
            }),
            _vm._v("化妆品   "),
            _c("InputBox", {
              attrs: { label: "其他", inputWidth: "12rem" },
              model: {
                value: _vm.allergiesOther,
                callback: function($$v) {
                  _vm.allergiesOther = $$v
                },
                expression: "allergiesOther"
              }
            })
          ],
          1
        )
      ]),
      _c("div", { staticClass: "common-wrapper" }, [
        _c("div", { staticClass: "wrapper-left" }, [_vm._v(" 其他情况:   ")]),
        _c("div", { staticClass: "wrapper-right" }, [
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.otheSituation,
                expression: "otheSituation"
              }
            ],
            attrs: { type: "checkbox", value: "辐射影响" },
            domProps: {
              checked: Array.isArray(_vm.otheSituation)
                ? _vm._i(_vm.otheSituation, "辐射影响") > -1
                : _vm.otheSituation
            },
            on: {
              change: function($event) {
                var $$a = _vm.otheSituation,
                  $$el = $event.target,
                  $$c = $$el.checked ? true : false
                if (Array.isArray($$a)) {
                  var $$v = "辐射影响",
                    $$i = _vm._i($$a, $$v)
                  if ($$el.checked) {
                    $$i < 0 && (_vm.otheSituation = $$a.concat([$$v]))
                  } else {
                    $$i > -1 &&
                      (_vm.otheSituation = $$a
                        .slice(0, $$i)
                        .concat($$a.slice($$i + 1)))
                  }
                } else {
                  _vm.otheSituation = $$c
                }
              }
            }
          }),
          _vm._v("辐射影响   "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.otheSituation,
                expression: "otheSituation"
              }
            ],
            attrs: { type: "checkbox", value: "脂肪污物阻塞" },
            domProps: {
              checked: Array.isArray(_vm.otheSituation)
                ? _vm._i(_vm.otheSituation, "脂肪污物阻塞") > -1
                : _vm.otheSituation
            },
            on: {
              change: function($event) {
                var $$a = _vm.otheSituation,
                  $$el = $event.target,
                  $$c = $$el.checked ? true : false
                if (Array.isArray($$a)) {
                  var $$v = "脂肪污物阻塞",
                    $$i = _vm._i($$a, $$v)
                  if ($$el.checked) {
                    $$i < 0 && (_vm.otheSituation = $$a.concat([$$v]))
                  } else {
                    $$i > -1 &&
                      (_vm.otheSituation = $$a
                        .slice(0, $$i)
                        .concat($$a.slice($$i + 1)))
                  }
                } else {
                  _vm.otheSituation = $$c
                }
              }
            }
          }),
          _vm._v("脂肪污物阻塞   "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.otheSituation,
                expression: "otheSituation"
              }
            ],
            attrs: { type: "checkbox", value: "化妆品铅质阻塞" },
            domProps: {
              checked: Array.isArray(_vm.otheSituation)
                ? _vm._i(_vm.otheSituation, "化妆品铅质阻塞") > -1
                : _vm.otheSituation
            },
            on: {
              change: function($event) {
                var $$a = _vm.otheSituation,
                  $$el = $event.target,
                  $$c = $$el.checked ? true : false
                if (Array.isArray($$a)) {
                  var $$v = "化妆品铅质阻塞",
                    $$i = _vm._i($$a, $$v)
                  if ($$el.checked) {
                    $$i < 0 && (_vm.otheSituation = $$a.concat([$$v]))
                  } else {
                    $$i > -1 &&
                      (_vm.otheSituation = $$a
                        .slice(0, $$i)
                        .concat($$a.slice($$i + 1)))
                  }
                } else {
                  _vm.otheSituation = $$c
                }
              }
            }
          }),
          _vm._v("化妆品铅质阻塞   "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.otheSituation,
                expression: "otheSituation"
              }
            ],
            attrs: { type: "checkbox", value: "体内毒素堆积" },
            domProps: {
              checked: Array.isArray(_vm.otheSituation)
                ? _vm._i(_vm.otheSituation, "体内毒素堆积") > -1
                : _vm.otheSituation
            },
            on: {
              change: function($event) {
                var $$a = _vm.otheSituation,
                  $$el = $event.target,
                  $$c = $$el.checked ? true : false
                if (Array.isArray($$a)) {
                  var $$v = "体内毒素堆积",
                    $$i = _vm._i($$a, $$v)
                  if ($$el.checked) {
                    $$i < 0 && (_vm.otheSituation = $$a.concat([$$v]))
                  } else {
                    $$i > -1 &&
                      (_vm.otheSituation = $$a
                        .slice(0, $$i)
                        .concat($$a.slice($$i + 1)))
                  }
                } else {
                  _vm.otheSituation = $$c
                }
              }
            }
          }),
          _vm._v("体内毒素堆积   "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.otheSituation,
                expression: "otheSituation"
              }
            ],
            attrs: { type: "checkbox", value: "组织坏死" },
            domProps: {
              checked: Array.isArray(_vm.otheSituation)
                ? _vm._i(_vm.otheSituation, "组织坏死") > -1
                : _vm.otheSituation
            },
            on: {
              change: function($event) {
                var $$a = _vm.otheSituation,
                  $$el = $event.target,
                  $$c = $$el.checked ? true : false
                if (Array.isArray($$a)) {
                  var $$v = "组织坏死",
                    $$i = _vm._i($$a, $$v)
                  if ($$el.checked) {
                    $$i < 0 && (_vm.otheSituation = $$a.concat([$$v]))
                  } else {
                    $$i > -1 &&
                      (_vm.otheSituation = $$a
                        .slice(0, $$i)
                        .concat($$a.slice($$i + 1)))
                  }
                } else {
                  _vm.otheSituation = $$c
                }
              }
            }
          }),
          _vm._v("组织坏死   "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.otheSituation,
                expression: "otheSituation"
              }
            ],
            attrs: { type: "checkbox", value: "色素沉淀" },
            domProps: {
              checked: Array.isArray(_vm.otheSituation)
                ? _vm._i(_vm.otheSituation, "色素沉淀") > -1
                : _vm.otheSituation
            },
            on: {
              change: function($event) {
                var $$a = _vm.otheSituation,
                  $$el = $event.target,
                  $$c = $$el.checked ? true : false
                if (Array.isArray($$a)) {
                  var $$v = "色素沉淀",
                    $$i = _vm._i($$a, $$v)
                  if ($$el.checked) {
                    $$i < 0 && (_vm.otheSituation = $$a.concat([$$v]))
                  } else {
                    $$i > -1 &&
                      (_vm.otheSituation = $$a
                        .slice(0, $$i)
                        .concat($$a.slice($$i + 1)))
                  }
                } else {
                  _vm.otheSituation = $$c
                }
              }
            }
          }),
          _vm._v("色素沉淀   "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.otheSituation,
                expression: "otheSituation"
              }
            ],
            attrs: { type: "checkbox", value: "清洁保养不当" },
            domProps: {
              checked: Array.isArray(_vm.otheSituation)
                ? _vm._i(_vm.otheSituation, "清洁保养不当") > -1
                : _vm.otheSituation
            },
            on: {
              change: function($event) {
                var $$a = _vm.otheSituation,
                  $$el = $event.target,
                  $$c = $$el.checked ? true : false
                if (Array.isArray($$a)) {
                  var $$v = "清洁保养不当",
                    $$i = _vm._i($$a, $$v)
                  if ($$el.checked) {
                    $$i < 0 && (_vm.otheSituation = $$a.concat([$$v]))
                  } else {
                    $$i > -1 &&
                      (_vm.otheSituation = $$a
                        .slice(0, $$i)
                        .concat($$a.slice($$i + 1)))
                  }
                } else {
                  _vm.otheSituation = $$c
                }
              }
            }
          }),
          _vm._v("清洁保养不当   "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.otheSituation,
                expression: "otheSituation"
              }
            ],
            attrs: { type: "checkbox", value: "不规则痘印" },
            domProps: {
              checked: Array.isArray(_vm.otheSituation)
                ? _vm._i(_vm.otheSituation, "不规则痘印") > -1
                : _vm.otheSituation
            },
            on: {
              change: function($event) {
                var $$a = _vm.otheSituation,
                  $$el = $event.target,
                  $$c = $$el.checked ? true : false
                if (Array.isArray($$a)) {
                  var $$v = "不规则痘印",
                    $$i = _vm._i($$a, $$v)
                  if ($$el.checked) {
                    $$i < 0 && (_vm.otheSituation = $$a.concat([$$v]))
                  } else {
                    $$i > -1 &&
                      (_vm.otheSituation = $$a
                        .slice(0, $$i)
                        .concat($$a.slice($$i + 1)))
                  }
                } else {
                  _vm.otheSituation = $$c
                }
              }
            }
          }),
          _vm._v("不规则痘印   "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.otheSituation,
                expression: "otheSituation"
              }
            ],
            attrs: { type: "checkbox", value: "洗脸用品不当" },
            domProps: {
              checked: Array.isArray(_vm.otheSituation)
                ? _vm._i(_vm.otheSituation, "洗脸用品不当") > -1
                : _vm.otheSituation
            },
            on: {
              change: function($event) {
                var $$a = _vm.otheSituation,
                  $$el = $event.target,
                  $$c = $$el.checked ? true : false
                if (Array.isArray($$a)) {
                  var $$v = "洗脸用品不当",
                    $$i = _vm._i($$a, $$v)
                  if ($$el.checked) {
                    $$i < 0 && (_vm.otheSituation = $$a.concat([$$v]))
                  } else {
                    $$i > -1 &&
                      (_vm.otheSituation = $$a
                        .slice(0, $$i)
                        .concat($$a.slice($$i + 1)))
                  }
                } else {
                  _vm.otheSituation = $$c
                }
              }
            }
          }),
          _vm._v("洗脸用品不当   "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.otheSituation,
                expression: "otheSituation"
              }
            ],
            attrs: { type: "checkbox", value: "皮脂分泌旺盛" },
            domProps: {
              checked: Array.isArray(_vm.otheSituation)
                ? _vm._i(_vm.otheSituation, "皮脂分泌旺盛") > -1
                : _vm.otheSituation
            },
            on: {
              change: function($event) {
                var $$a = _vm.otheSituation,
                  $$el = $event.target,
                  $$c = $$el.checked ? true : false
                if (Array.isArray($$a)) {
                  var $$v = "皮脂分泌旺盛",
                    $$i = _vm._i($$a, $$v)
                  if ($$el.checked) {
                    $$i < 0 && (_vm.otheSituation = $$a.concat([$$v]))
                  } else {
                    $$i > -1 &&
                      (_vm.otheSituation = $$a
                        .slice(0, $$i)
                        .concat($$a.slice($$i + 1)))
                  }
                } else {
                  _vm.otheSituation = $$c
                }
              }
            }
          }),
          _vm._v("皮脂分泌旺盛   "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.otheSituation,
                expression: "otheSituation"
              }
            ],
            attrs: { type: "checkbox", value: "比较深" },
            domProps: {
              checked: Array.isArray(_vm.otheSituation)
                ? _vm._i(_vm.otheSituation, "比较深") > -1
                : _vm.otheSituation
            },
            on: {
              change: function($event) {
                var $$a = _vm.otheSituation,
                  $$el = $event.target,
                  $$c = $$el.checked ? true : false
                if (Array.isArray($$a)) {
                  var $$v = "比较深",
                    $$i = _vm._i($$a, $$v)
                  if ($$el.checked) {
                    $$i < 0 && (_vm.otheSituation = $$a.concat([$$v]))
                  } else {
                    $$i > -1 &&
                      (_vm.otheSituation = $$a
                        .slice(0, $$i)
                        .concat($$a.slice($$i + 1)))
                  }
                } else {
                  _vm.otheSituation = $$c
                }
              }
            }
          }),
          _vm._v("比较深   ")
        ])
      ]),
      _c("div", { staticClass: "bottom" }, [
        _vm._v(" 建议回访情况:   "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.returnVisit,
              expression: "returnVisit"
            }
          ],
          attrs: { type: "text", placeholder: "回访情况" },
          domProps: { value: _vm.returnVisit },
          on: {
            input: function($event) {
              if ($event.target.composing) {
                return
              }
              _vm.returnVisit = $event.target.value
            }
          }
        })
      ]),
      _c("div", { staticClass: "btn_submit" }, [
        _c(
          "button",
          {
            staticClass: "btn",
            on: {
              click: function($event) {
                $event.stopPropagation()
                return _vm.submitInfo.apply(null, arguments)
              }
            }
          },
          [_vm._v("提交")]
        )
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "heat-top" }, [
      _c("div", { staticClass: "name" }, [
        _c("span", { staticClass: "left" }, [_vm._v("痘院士")]),
        _c("span", { staticClass: "R-copy" }, [_vm._v("®")])
      ]),
      _c("div", { staticClass: "line" }),
      _c("div", { staticClass: "left" }, [
        _c("p", [_vm._v("问题性皮肤管理中心")]),
        _c("p", [_vm._v("祛痘祛斑·全国连锁")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "top-left" }, [
      _vm._v("个人基本信息 "),
      _c("div", { staticClass: "bevel" })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "face-img" }, [
      _c("img", {
        attrs: { src: require("../../src/assets/images/face.png"), alt: "" }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "info-top" }, [
      _c("div", { staticClass: "top-left" }, [
        _vm._v("顾客情况描述 "),
        _c("div", { staticClass: "bevel" })
      ]),
      _c("div", { staticClass: "top-right" })
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}